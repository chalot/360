/*******************************************************************************
 *                                                                             *
 * Copyright (c) 2011 Texas Instruments Incorporated - http://www.ti.com/      *
 *                        ALL RIGHTS RESERVED                                  *
 *                                                                             *
 ******************************************************************************/

/*
 *   @file  ipc.cfg
 *
 *   @brief 
 */
 
function init(ipcCfgArg)
{
    /* root of the configuration object model */
    var Program = xdc.useModule('xdc.cfg.Program');

    var MessageQ                = xdc.useModule('ti.sdo.ipc.MessageQ');
    
    MessageQ.numHeaps = 2;//liuxu, 11/20/2013, we added one heap in code.
     
    //MessageQ.SetupTransportProxy = xdc.module('ti.sdo.ipc.transports.TransportShmNotifySetup'); 
    
    //MessageQ.SetupTransportProxy = xdc.module('ti.sdo.ipc.transports.TransportShmCircSetup');//liuxu, 03/18/2014, change for mailbox isr issue, RISK...need to sync with M3 project. 
    
    
    var Ipc                     = xdc.useModule('ti.sdo.ipc.Ipc');
    var HeapBufMP               = xdc.useModule('ti.sdo.ipc.heaps.HeapBufMP');

    var Notify = xdc.useModule('ti.sdo.ipc.Notify');
    //Notify.SetupProxy = xdc.useModule('ti.sdo.ipc.family.c6a8149.NotifyMbxSetup');
    
    /* required because SysLink is running on the host processor *///liuxuliuxu, 8/19/2013 for communicate with A8 running syslink.
    xdc.useModule('ti.syslink.ipc.rtos.Syslink');

    var MultiProc = xdc.useModule('ti.sdo.utils.MultiProc');

//liuxuliuxu, remove the EVE core in context of J5eco.
    MultiProc.setConfig(Program.global.coreName, 
            ["DSP", "VIDEO-M3", "VPSS-M3", "HOST"]);
            
                        
    if ( Program.build.cfgArgs.APP_ON_M3 == "0" )            
    {

        var hostId = MultiProc.getIdMeta("HOST");
        Ipc.procSync = Ipc.ProcSync_PAIR; 
/*Ipc.ProcSync_PAIR. (Default) If you use this option, you must explicitly call Ipc_attach() to attach to
a specific remote processor. If you use this option, Ipc_start() performs system-wide IPC initialization,
but does not make connections to remote processors. Use this option if any or all of the following are
true:
— You need to control when synchronization with each remote processor occurs.
— Useful work can be done while trying to synchronize with a remote processor by yielding a thread
after each attempt to Ipc_attach() to the processor.
— Connections to some remote processors are unnecessary and should be made selectively to save memory.*/
	    /* Set host id */
        Ipc.hostProcId = hostId;
        Ipc.sr0MemorySetup = true;
        for (var i=0; i < MultiProc.numProcessors; i++) {
             Ipc.setEntryMeta({
                 remoteProcId: i,
                 setupNotify:true,
                 setupMessageQ:true
             });
        }

        /* Shared 0 Memory Map */
        sr0Segment = undefined;
        for (var i = 0; i < Program.cpu.memoryMap.length; i++) 
        {
            if (Program.cpu.memoryMap[i].name == ipcCfgArg.sr0MemSegmentName) 
            {
                sr0Segment = Program.cpu.memoryMap[i];
            }
        }
        
        var sr0OwnerProcId = MultiProc.getIdMeta("HOST");

        /* 
         *  Need to define the shared region. The IPC modules use this
         *  to make portable pointers. All processors need to add this
         *  call with their base address of the shared memory region.
         *  If the processor cannot access the memory, do not add it.
         */ 
        var SharedRegion = xdc.useModule('ti.sdo.ipc.SharedRegion');
        
        SharedRegion.numEntries    = 1;//liuxuliuxu, the one before is "4".
        
        SharedRegion.setEntryMeta(0,
            { base: sr0Segment.base, 
              len:  sr0Segment.len,
              ownerProcId: sr0OwnerProcId,
              isValid: true,
              cacheEnable:true,
              name: "Sr0",
            });
    }
    else
    {
        
        var dspId = MultiProc.getIdMeta("DSP");
        Ipc.procSync = Ipc.ProcSync_PAIR;
        /* Set host id */
        Ipc.hostProcId = dspId;
        Ipc.sr0MemorySetup = true;
        for (var i=0; i < MultiProc.numProcessors; i++) {
             Ipc.setEntryMeta({
                 remoteProcId: i,
                 setupNotify:true,
                 setupMessageQ:true
             });
        }

        /* Shared 0 Memory Map */
        //sr0Segment = undefined;

//liuxuliuxu, M3 side share region memory should be covered by AMMU, so i'm changing DSP side to adapt for easy use.
/*
        for (var i = 0; i < Program.cpu.memoryMap.length; i++) 
        {
            if (Program.cpu.memoryMap[i].name == ipcCfgArg.sr0MemSegmentName) 
            {
                sr0Segment = Program.cpu.memoryMap[i];
            }
        }
*/

				//sr0Segment.base = 0x9BE00000;
				//sr0Segment.len = 0x200000;
				
        var sr0OwnerProcId = MultiProc.getIdMeta("DSP");
        
        var sr0OwnerProcId_A8 = MultiProc.getIdMeta("HOST");

        /* 
         *  Need to define the shared region. The IPC modules use this
         *  to make portable pointers. All processors need to add this
         *  call with their base address of the shared memory region.
         *  If the processor cannot access the memory, do not add it.
         */ 
        var SharedRegion = xdc.useModule('ti.sdo.ipc.SharedRegion');
        
        SharedRegion.numEntries    = 2;//liuxuliuxu, the one before is "4".
        
        /*liuxuliuxu, 8_20_2013, cacheEnable:true, to false, because the issue of cache at Linux side.*/
        //liuxu, 8/21/2013, in order to use non-cacheable shared region according to M3 AMMU. change from 0x9BE00000.
        
        //SharedRegion.createHeap = true; //liuxu, 10/14/2013
        
        //liuxu, 11/5/2013, for mem_size_128MB.
        SharedRegion.setEntryMeta(0,
            { base: 0x85B00000, 
              len:  0x100000,
              ownerProcId: sr0OwnerProcId,
              isValid: true,
              cacheEnable:false,
              name: "Sr0",
            });

//liuxu, 8/22/2013, just want to create a memory map into the ELF so that ARM can see it and do transfer by "ProcMgr_translateAddr", 0x8bb00000 to 0x8ff00000, frame buffer.            
//liuxu, 8/22/2013, the frame buffers are too huge, need to optimize. Otherwise, DSP program could be crashed. 
//liuxu, 10/14/2013, change isValid to false so that the code(initSharedRegion()) can creat the heap for A8 to open.
//liuxu, 10/17/2013, isValid has to be true, otherwise, A8 can NOT see any section info during loading and remove creatheap true of sr0, set owner to A8.         
//liuxu, 10/17/2013, change according to A8; don't map too many useless buffers due to potential MMU issue of A8, just for 2nd 4xD1 for queue depth of 6, 13MB from 0x8e2cc0c0 actually(4KB align).         
//liuxu, 11/5/2013, for mem_size_128MB.

        SharedRegion.setEntryMeta(1,
            { base: 0x81800000, 
              len:  0x3f00000,
              ownerProcId: sr0OwnerProcId,
              isValid: true,
              cacheEnable:false,
              name: "Sr1",
              createHeap: true,
            });
            

    }       
}